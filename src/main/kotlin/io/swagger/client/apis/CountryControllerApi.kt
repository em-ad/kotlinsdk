/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.OneFieldModel

import io.swagger.client.infrastructure.*

class CountryControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * getCities
     * 
     * @param country country 
     * @param state state 
     * @param acceptLanguage language (optional)
     * @param q q (optional)
     * @return kotlin.Array<OneFieldModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCities(country: kotlin.String, state: kotlin.String, acceptLanguage: kotlin.String? = null, q: kotlin.String? = null): kotlin.Array<OneFieldModel> {
        val localVariableQuery: MultiValueMap = mapOf("country" to listOf("$country"), "state" to listOf("$state"), "q" to listOf("$q"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/location/countries/states/cities", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<kotlin.Array<OneFieldModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OneFieldModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getCountries
     * 
     * @param acceptLanguage language (optional)
     * @param q q (optional)
     * @return kotlin.Array<OneFieldModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCountries(acceptLanguage: kotlin.String? = null, q: kotlin.String? = null): kotlin.Array<OneFieldModel> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/location/countries", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<kotlin.Array<OneFieldModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OneFieldModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getStates
     * 
     * @param country country 
     * @param acceptLanguage language (optional)
     * @param q q (optional)
     * @return kotlin.Array<OneFieldModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getStates(country: kotlin.String, acceptLanguage: kotlin.String? = null, q: kotlin.String? = null): kotlin.Array<OneFieldModel> {
        val localVariableQuery: MultiValueMap = mapOf("country" to listOf("$country"), "q" to listOf("$q"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/location/countries/states", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<kotlin.Array<OneFieldModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OneFieldModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
