/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CreateGeoDto
import io.swagger.client.models.GetGeoDto

import io.swagger.client.infrastructure.*

class GeoControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * create
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return GetGeoDto
     */
    @Suppress("UNCHECKED_CAST")
    fun create3(body: CreateGeoDto? = null, acceptLanguage: kotlin.String? = null): GetGeoDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/geo", headers = localVariableHeaders
        )
        val response = request<GetGeoDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetGeoDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * delete
     * 
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun delete4(id: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/geo/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get
     * 
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return GetGeoDto
     */
    @Suppress("UNCHECKED_CAST")
    fun get7(id: kotlin.String, acceptLanguage: kotlin.String? = null): GetGeoDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/geo/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<GetGeoDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetGeoDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getList
     * 
     * @param distance  
     * @param lat  
     * @param lng  
     * @param acceptLanguage language (optional)
     * @param tagTitle  (optional)
     * @param type  (optional)
     * @return kotlin.Array<GetGeoDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getList1(distance: kotlin.Double, lat: kotlin.Double, lng: kotlin.Double, acceptLanguage: kotlin.String? = null, tagTitle: kotlin.String? = null, type: kotlin.String? = null): kotlin.Array<GetGeoDto> {
        val localVariableQuery: MultiValueMap = mapOf("distance" to listOf("$distance"), "lat" to listOf("$lat"), "lng" to listOf("$lng"), "tagTitle" to listOf("$tagTitle"), "type" to listOf("$type"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/geo", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<kotlin.Array<GetGeoDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GetGeoDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * update
     * 
     * @param id id 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return GetGeoDto
     */
    @Suppress("UNCHECKED_CAST")
    fun update2(id: kotlin.String, body: CreateGeoDto? = null, acceptLanguage: kotlin.String? = null): GetGeoDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/geo/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<GetGeoDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetGeoDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
