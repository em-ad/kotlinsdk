/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Capability
import io.swagger.client.models.CapabilityDto
import io.swagger.client.models.CreateLawyerDto
import io.swagger.client.models.EducationalBackground
import io.swagger.client.models.EducationalBackgroundDTO
import io.swagger.client.models.GetLawyerDto
import io.swagger.client.models.LanguageDTO
import io.swagger.client.models.LawyerConfirmationDto
import io.swagger.client.models.LawyerConsultingDto
import io.swagger.client.models.PackageProperties
import io.swagger.client.models.Page_GetComment_
import io.swagger.client.models.Page_Lawyer_
import io.swagger.client.models.PersonalInformationDTO
import io.swagger.client.models.ProfessionalInformationDTO
import io.swagger.client.models.ProfessionalInformationProDTO
import io.swagger.client.models.ProfessionalPersonalInformationDTOReq
import io.swagger.client.models.ProfessionalPersonalInformationDTORes
import io.swagger.client.models.ProfessionalProfile
import io.swagger.client.models.ProfessionalProfileDTO
import io.swagger.client.models.Resume
import io.swagger.client.models.ResumeDTO

import io.swagger.client.infrastructure.*

class LawyerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * checkInformation
     * 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun checkInformation(acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/lawyers/check-information", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * create
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return GetLawyerDto
     */
    @Suppress("UNCHECKED_CAST")
    fun create2(body: CreateLawyerDto? = null, acceptLanguage: kotlin.String? = null): GetLawyerDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/lawyers/create", headers = localVariableHeaders
        )
        val response = request<GetLawyerDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetLawyerDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get
     * 
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun get3(acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/professional-profile", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get
     * 
     * @param userId user-id 
     * @param acceptLanguage language (optional)
     * @return GetLawyerDto
     */
    @Suppress("UNCHECKED_CAST")
    fun get4(userId: kotlin.String, acceptLanguage: kotlin.String? = null): GetLawyerDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/get/{user-id}".replace("{" + "user-id" + "}", "$userId"), headers = localVariableHeaders
        )
        val response = request<GetLawyerDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetLawyerDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getById
     * 
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return LawyerConsultingDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getById(id: kotlin.String, acceptLanguage: kotlin.String? = null): LawyerConsultingDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/professional-profile/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<LawyerConsultingDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LawyerConsultingDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getCapabilityById
     * 
     * @param lawyerId lawyerId 
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<Capability>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCapabilityById(lawyerId: kotlin.String, acceptLanguage: kotlin.String? = null): kotlin.Array<Capability> {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/capability/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<kotlin.Array<Capability>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Capability>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getComments
     * 
     * @param lawyerId lawyerId 
     * @param acceptLanguage language (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @return Page_GetComment_
     */
    @Suppress("UNCHECKED_CAST")
    fun getComments(lawyerId: kotlin.String, acceptLanguage: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null): Page_GetComment_ {
        val localVariableQuery: MultiValueMap = mapOf("pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/comment/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_GetComment_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_GetComment_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getEducationalInformationById
     * 
     * @param lawyerId lawyerId 
     * @param acceptLanguage language (optional)
     * @return EducationalBackground
     */
    @Suppress("UNCHECKED_CAST")
    fun getEducationalInformationById(lawyerId: kotlin.String, acceptLanguage: kotlin.String? = null): EducationalBackground {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/educational-information/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<EducationalBackground>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EducationalBackground
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getLanguages
     * 
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<LanguageDTO>
     */
    @Suppress("UNCHECKED_CAST")
    fun getLanguages(acceptLanguage: kotlin.String? = null): kotlin.Array<LanguageDTO> {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/languages", headers = localVariableHeaders
        )
        val response = request<kotlin.Array<LanguageDTO>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<LanguageDTO>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getLawyerInformation
     * 
     * @param userId user-id 
     * @param acceptLanguage language (optional)
     * @return LawyerConsultingDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getLawyerInformation(userId: kotlin.String, acceptLanguage: kotlin.String? = null): LawyerConsultingDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/professional-profile/get/{user-id}".replace("{" + "user-id" + "}", "$userId"), headers = localVariableHeaders
        )
        val response = request<LawyerConsultingDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LawyerConsultingDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getPersonalInformationById
     * 
     * @param lawyerId lawyerId 
     * @param acceptLanguage language (optional)
     * @return ProfessionalPersonalInformationDTORes
     */
    @Suppress("UNCHECKED_CAST")
    fun getPersonalInformationById(lawyerId: kotlin.String, acceptLanguage: kotlin.String? = null): ProfessionalPersonalInformationDTORes {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/personal-information/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<ProfessionalPersonalInformationDTORes>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalPersonalInformationDTORes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getProfessionalInformationById
     * 
     * @param lawyerId lawyerId 
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfile
     */
    @Suppress("UNCHECKED_CAST")
    fun getProfessionalInformationById(lawyerId: kotlin.String, acceptLanguage: kotlin.String? = null): ProfessionalProfile {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/professional-information/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<ProfessionalProfile>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfile
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getResumeById
     * 
     * @param lawyerId lawyerId 
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<Resume>
     */
    @Suppress("UNCHECKED_CAST")
    fun getResumeById(lawyerId: kotlin.String, acceptLanguage: kotlin.String? = null): kotlin.Array<Resume> {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/resume/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<kotlin.Array<Resume>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Resume>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * lawyersList
     * 
     * @param consultationType consultation-type 
     * @param acceptLanguage language (optional)
     * @param byPrice  (optional)
     * @param byRate  (optional)
     * @param categoryId categoryId (optional)
     * @param firstName  (optional)
     * @param fullName  (optional)
     * @param genderEnum  (optional)
     * @param lastName  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @return Page_Lawyer_
     */
    @Suppress("UNCHECKED_CAST")
    fun lawyersList(consultationType: kotlin.String, acceptLanguage: kotlin.String? = null, byPrice: kotlin.String? = null, byRate: kotlin.String? = null, categoryId: kotlin.String? = null, firstName: kotlin.String? = null, fullName: kotlin.String? = null, genderEnum: kotlin.String? = null, lastName: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null): Page_Lawyer_ {
        val localVariableQuery: MultiValueMap = mapOf("byPrice" to listOf("$byPrice"), "byRate" to listOf("$byRate"), "categoryId" to listOf("$categoryId"), "firstName" to listOf("$firstName"), "fullName" to listOf("$fullName"), "genderEnum" to listOf("$genderEnum"), "lastName" to listOf("$lastName"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/consulting/get/{consultation-type}".replace("{" + "consultation-type" + "}", "$consultationType"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_Lawyer_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_Lawyer_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * lawyersListWithPackage
     * 
     * @param userId user-id 
     * @param acceptLanguage language (optional)
     * @param categoryId categoryId (optional)
     * @param type type (optional)
     * @return kotlin.Array<PackageProperties>
     */
    @Suppress("UNCHECKED_CAST")
    fun lawyersListWithPackage(userId: kotlin.String, acceptLanguage: kotlin.String? = null, categoryId: kotlin.String? = null, type: kotlin.String? = null): kotlin.Array<PackageProperties> {
        val localVariableQuery: MultiValueMap = mapOf("categoryId" to listOf("$categoryId"), "type" to listOf("$type"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/lawyers/consulting/{user-id}".replace("{" + "user-id" + "}", "$userId"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<kotlin.Array<PackageProperties>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PackageProperties>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveCapability
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveCapability(body: CapabilityDto? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/capability", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveCapabilityById
     * 
     * @param lawyerId lawyerId 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveCapabilityById(lawyerId: kotlin.String, body: CapabilityDto? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/capability/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveEducationalInformation
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveEducationalInformation(body: EducationalBackgroundDTO? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/educational-information", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveEducationalInformationById
     * 
     * @param lawyerId lawyerId 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveEducationalInformationById(lawyerId: kotlin.String, body: EducationalBackgroundDTO? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/educational-information/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * savePersonalInformation
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun savePersonalInformation(body: PersonalInformationDTO? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/personal-information", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * savePersonalInformationById
     * 
     * @param lawyerId lawyerId 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun savePersonalInformationById(lawyerId: kotlin.String, body: ProfessionalPersonalInformationDTOReq? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/personal-information/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveProfessionalInformation
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveProfessionalInformation(body: ProfessionalInformationDTO? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/professional-information", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveProfessionalInformation
     * 
     * @param lawyerId lawyerId 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveProfessionalInformation1(lawyerId: kotlin.String, body: ProfessionalInformationProDTO? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/professional-information/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveResume
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveResume(body: ResumeDTO? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/resume", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * saveResumeById
     * 
     * @param lawyerId lawyerId 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun saveResumeById(lawyerId: kotlin.String, body: ResumeDTO? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/lawyers/resume/{lawyerId}".replace("{" + "lawyerId" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updateLawyerState
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun updateLawyerStateUsingPATCH1(body: LawyerConfirmationDto? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/lawyers/change-state", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
