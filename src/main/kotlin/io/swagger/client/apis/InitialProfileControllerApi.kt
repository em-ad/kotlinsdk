/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.FileOrFolder
import io.swagger.client.models.InitialProfileLawyerDto
import io.swagger.client.models.LawyerTypeDto
import io.swagger.client.models.LawyerTypeResponseModel
import io.swagger.client.models.LawyersLicenseUploadFileDto
import io.swagger.client.models.LawyersResumeAndDegreeEducationDto
import io.swagger.client.models.ProfessionalProfileDTO
import io.swagger.client.models.SelectSkillDto
import io.swagger.client.models.User

import io.swagger.client.infrastructure.*

class InitialProfileControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * initial profile
     * This api add to initial-profile lawyer
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun createInitialProfile(body: InitialProfileLawyerDto? = null, acceptLanguage: kotlin.String? = null): User {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/initial-profile", headers = localVariableHeaders
        )
        val response = request<User>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * lawyerType
     * This api add to lawyerType
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createLawyerType(body: LawyerTypeDto? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/initial-profile/lawyerType", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * ListLawyerType 
     * This api List Lawyer Type
     * @param acceptLanguage language (optional)
     * @return LawyerTypeResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun getListLawyerType(acceptLanguage: kotlin.String? = null): LawyerTypeResponseModel {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/initial-profile/lawyer-type", headers = localVariableHeaders
        )
        val response = request<LawyerTypeResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LawyerTypeResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * LawyersLicence
     * This api add to LawyersLicence
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun insertLawyersLicenceWithPhotos(body: LawyersLicenseUploadFileDto? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/initial-profile/lawyers-licence", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Lawyers lawyers resume degree
     * This api add to lawyers,resume,degree
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun insertLawyersResumeAndDegree(body: LawyersResumeAndDegreeEducationDto? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/initial-profile/lawyers-resume-degree", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Select skill
     * This api add to Select skill
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ProfessionalProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun insertSelectSKill(body: SelectSkillDto? = null, acceptLanguage: kotlin.String? = null): ProfessionalProfileDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/initial-profile/select-skill", headers = localVariableHeaders
        )
        val response = request<ProfessionalProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfessionalProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * upload InitialProfile
     * This api add to uploadInitialProfile
     * @param name  (optional)
     * @param acceptLanguage language (optional)
     * @return FileOrFolder
     */
    @Suppress("UNCHECKED_CAST")
    fun uploadInitialProfile(name: kotlin.String? = null, acceptLanguage: kotlin.String? = null): FileOrFolder {
        val localVariableBody: kotlin.Any? = mapOf("name" to "$name")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data", "Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/initial-profile/upload-file", headers = localVariableHeaders
        )
        val response = request<FileOrFolder>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileOrFolder
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
