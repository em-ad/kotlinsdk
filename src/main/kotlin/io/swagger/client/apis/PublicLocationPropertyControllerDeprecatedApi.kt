/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.GetLocationPropertyDto
import io.swagger.client.models.Page_GetLocationPropertyDto_

import io.swagger.client.infrastructure.*

class PublicLocationPropertyControllerDeprecatedApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * getPropertiesList
     * 
     * @param acceptLanguage language (optional)
     * @param ids  (optional)
     * @param optionIds  (optional)
     * @param pageNumber starts from 0 (optional)
     * @param pageSize must be greater than 0 (optional)
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending (optional)
     * @param sortKey sort will be based on these words (optional)
     * @return Page_GetLocationPropertyDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getPropertiesList2(acceptLanguage: kotlin.String? = null, ids: kotlin.Array<kotlin.String>? = null, optionIds: kotlin.Array<kotlin.String>? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null): Page_GetLocationPropertyDto_ {
        val localVariableQuery: MultiValueMap = mapOf("ids" to toMultiValue(ids!!.toList(), "pipe"), "optionIds" to toMultiValue(optionIds!!.toList(), "pipe"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/v1/locations/properties", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_GetLocationPropertyDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_GetLocationPropertyDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getProperty
     * 
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return GetLocationPropertyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getProperty2(id: kotlin.String, acceptLanguage: kotlin.String? = null): GetLocationPropertyDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/v1/locations/properties/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<GetLocationPropertyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetLocationPropertyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
