/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class PublicFileDownloadControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * download
     * 
     * @param originalFileName originalFileName 
     * @param acceptLanguage language (optional)
     * @param access  (optional)
     * @param bucketName  (optional)
     * @param fileName  (optional)
     * @param parentId  (optional)
     * @param provider  (optional)
     * @return void
     */
    fun download(originalFileName: kotlin.String, acceptLanguage: kotlin.String? = null, access: kotlin.String? = null, bucketName: kotlin.String? = null, fileName: kotlin.String? = null, parentId: kotlin.String? = null, provider: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("access" to listOf("$access"), "bucketName" to listOf("$bucketName"), "fileName" to listOf("$fileName"), "parentId" to listOf("$parentId"), "provider" to listOf("$provider"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/api/v1/file/download/{originalFileName}".replace("{" + "originalFileName" + "}", "$originalFileName"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * downloadFile
     * 
     * @param bucket bucket 
     * @param file file 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun downloadFile(bucket: kotlin.String, file: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/api/v1/file/download/{bucket}/{file}".replace("{" + "bucket" + "}", "$bucket").replace("{" + "file" + "}", "$file"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * downloadFileLocal
     * 
     * @param bucket bucket 
     * @param file file 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun downloadFileLocal(bucket: kotlin.String, file: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/api/v1/file/storage/{userid}/{access}/{bucket}/{file}".replace("{" + "bucket" + "}", "$bucket").replace("{" + "file" + "}", "$file"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
