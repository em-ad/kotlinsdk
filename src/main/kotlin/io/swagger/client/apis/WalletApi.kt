/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CheckoutInputDto
import io.swagger.client.models.CheckoutOutputDto
import io.swagger.client.models.DoTransactionDto
import io.swagger.client.models.GetInvoiceInformationDto
import io.swagger.client.models.Page_CheckoutOutputDto_
import io.swagger.client.models.Page_DatyarWalletTransactionDto_
import io.swagger.client.models.TransactionResultDto
import io.swagger.client.models.TransferBalanceDto

import io.swagger.client.infrastructure.*

class WalletApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * checkTransaction
     * 
     * @param sessionId  
     * @param acceptLanguage language (optional)
     * @return TransactionResultDto
     */
    @Suppress("UNCHECKED_CAST")
    fun checkTransaction(sessionId: kotlin.String, acceptLanguage: kotlin.String? = null): TransactionResultDto {
        val localVariableQuery: MultiValueMap = mapOf("sessionId" to listOf("$sessionId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/wallet/check/transaction", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<TransactionResultDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TransactionResultDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * checkoutChangeState
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun checkoutChangeStateUsingPATCH1(body: CheckoutInputDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/wallet/checkout/change-state", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * checkoutRequest
     * 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun checkoutRequest(acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/wallet/checkout/request", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * doUserTransaction
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun doUserTransaction(body: DoTransactionDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/wallet/do-transaction", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllCheckout
     * 
     * @param acceptLanguage language (optional)
     * @param clientEmail  (optional)
     * @param clientFirstName  (optional)
     * @param clientFullName  (optional)
     * @param clientLastName  (optional)
     * @param clientMobileNumber  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @param state  (optional)
     * @return Page_CheckoutOutputDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllCheckout(acceptLanguage: kotlin.String? = null, clientEmail: kotlin.String? = null, clientFirstName: kotlin.String? = null, clientFullName: kotlin.String? = null, clientLastName: kotlin.String? = null, clientMobileNumber: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, state: kotlin.String? = null): Page_CheckoutOutputDto_ {
        val localVariableQuery: MultiValueMap = mapOf("clientEmail" to listOf("$clientEmail"), "clientFirstName" to listOf("$clientFirstName"), "clientFullName" to listOf("$clientFullName"), "clientLastName" to listOf("$clientLastName"), "clientMobileNumber" to listOf("$clientMobileNumber"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"), "state" to listOf("$state"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/wallet/checkout", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_CheckoutOutputDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_CheckoutOutputDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllTransactions
     * 
     * @param acceptLanguage language (optional)
     * @param createdDateFrom  (optional)
     * @param createdDateFromMilli  (optional)
     * @param createdDateTo  (optional)
     * @param createdDateToMilli  (optional)
     * @param pageNumber starts from 0 (optional)
     * @param pageSize must be greater than 0 (optional)
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending (optional)
     * @param sortKey sort will be based on these words (use createdDate instead of createdDateMilli) (optional)
     * @param state  (optional)
     * @param subscriberId  (optional)
     * @param userId  (optional)
     * @return Page_DatyarWalletTransactionDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllTransactions(acceptLanguage: kotlin.String? = null, createdDateFrom: kotlin.String? = null, createdDateFromMilli: kotlin.Long? = null, createdDateTo: kotlin.String? = null, createdDateToMilli: kotlin.Long? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, state: kotlin.String? = null, subscriberId: kotlin.String? = null, userId: kotlin.String? = null): Page_DatyarWalletTransactionDto_ {
        val localVariableQuery: MultiValueMap = mapOf("createdDateFrom" to listOf("$createdDateFrom"), "createdDateFromMilli" to listOf("$createdDateFromMilli"), "createdDateTo" to listOf("$createdDateTo"), "createdDateToMilli" to listOf("$createdDateToMilli"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"), "state" to listOf("$state"), "subscriberId" to listOf("$subscriberId"), "userId" to listOf("$userId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/wallet/transaction", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_DatyarWalletTransactionDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_DatyarWalletTransactionDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getInvoiceInformation
     * 
     * @param sessionId  
     * @param acceptLanguage language (optional)
     * @param discountCode  (optional)
     * @return GetInvoiceInformationDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getInvoiceInformation(sessionId: kotlin.String, acceptLanguage: kotlin.String? = null, discountCode: kotlin.String? = null): GetInvoiceInformationDto {
        val localVariableQuery: MultiValueMap = mapOf("discountCode" to listOf("$discountCode"), "sessionId" to listOf("$sessionId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/wallet/invoice", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<GetInvoiceInformationDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetInvoiceInformationDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getUserCheckout
     * 
     * @param acceptLanguage language (optional)
     * @return CheckoutOutputDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserCheckout(acceptLanguage: kotlin.String? = null): CheckoutOutputDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/wallet/user/checkout", headers = localVariableHeaders
        )
        val response = request<CheckoutOutputDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CheckoutOutputDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * transferBalance
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun transferBalance(body: TransferBalanceDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/wallet/transfer-balance", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
