/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.BalanceResponse
import io.swagger.client.models.CreateSubscriberWalletTransactionDto
import io.swagger.client.models.CreateUserWalletTransactionDto
import io.swagger.client.models.Page_WalletTransactionDto_
import io.swagger.client.models.RevenueDto
import io.swagger.client.models.SumResponse
import io.swagger.client.models.WalletTransactionDto

import io.swagger.client.infrastructure.*

class WalletTransactionControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * doSubscriberTransaction
     * don&#x27;t fill id, token, subscriberId, createdDateMilli, paymentLink, 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return WalletTransactionDto
     */
    @Suppress("UNCHECKED_CAST")
    fun doSubscriberTransaction(body: CreateSubscriberWalletTransactionDto? = null, acceptLanguage: kotlin.String? = null): WalletTransactionDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/wallet/subscriber/transaction", headers = localVariableHeaders
        )
        val response = request<WalletTransactionDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WalletTransactionDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * doTransaction
     * don&#x27;t fill id, token,  createdDateMilli, paymentLink, 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return WalletTransactionDto
     */
    @Suppress("UNCHECKED_CAST")
    fun doTransaction(body: WalletTransactionDto? = null, acceptLanguage: kotlin.String? = null): WalletTransactionDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/wallet/transaction", headers = localVariableHeaders
        )
        val response = request<WalletTransactionDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WalletTransactionDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * doUserTransaction
     * don&#x27;t fill id, token, userId, createdDateMilli, paymentLink, 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return WalletTransactionDto
     */
    @Suppress("UNCHECKED_CAST")
    fun doUserTransaction1(body: CreateUserWalletTransactionDto? = null, acceptLanguage: kotlin.String? = null): WalletTransactionDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/wallet/user/transaction", headers = localVariableHeaders
        )
        val response = request<WalletTransactionDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WalletTransactionDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllSubscriberTransactions
     * 
     * @param acceptLanguage language (optional)
     * @param pageNumber starts from 0 (optional)
     * @param pageSize must be greater than 0 (optional)
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending (optional)
     * @param sortKey sort will be based on these words (use createdDate instead of createdDateMilli) (optional)
     * @return Page_WalletTransactionDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllSubscriberTransactions(acceptLanguage: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null): Page_WalletTransactionDto_ {
        val localVariableQuery: MultiValueMap = mapOf("pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/subscriber/transaction", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_WalletTransactionDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_WalletTransactionDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllTransactions
     * 
     * @param acceptLanguage language (optional)
     * @param createdDateFrom  (optional)
     * @param createdDateFromMilli  (optional)
     * @param createdDateTo  (optional)
     * @param createdDateToMilli  (optional)
     * @param pageNumber starts from 0 (optional)
     * @param pageSize must be greater than 0 (optional)
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending (optional)
     * @param sortKey sort will be based on these words (use createdDate instead of createdDateMilli) (optional)
     * @param state  (optional)
     * @param subscriberId  (optional)
     * @param userId  (optional)
     * @return Page_WalletTransactionDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllTransactions1(acceptLanguage: kotlin.String? = null, createdDateFrom: kotlin.String? = null, createdDateFromMilli: kotlin.Long? = null, createdDateTo: kotlin.String? = null, createdDateToMilli: kotlin.Long? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, state: kotlin.String? = null, subscriberId: kotlin.String? = null, userId: kotlin.String? = null): Page_WalletTransactionDto_ {
        val localVariableQuery: MultiValueMap = mapOf("createdDateFrom" to listOf("$createdDateFrom"), "createdDateFromMilli" to listOf("$createdDateFromMilli"), "createdDateTo" to listOf("$createdDateTo"), "createdDateToMilli" to listOf("$createdDateToMilli"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"), "state" to listOf("$state"), "subscriberId" to listOf("$subscriberId"), "userId" to listOf("$userId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/transaction", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_WalletTransactionDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_WalletTransactionDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllUserTransactions
     * 
     * @param acceptLanguage language (optional)
     * @param pageNumber starts from 0 (optional)
     * @param pageSize must be greater than 0 (optional)
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending (optional)
     * @param sortKey sort will be based on these words (use createdDate instead of createdDateMilli) (optional)
     * @return Page_WalletTransactionDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllUserTransactions(acceptLanguage: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null): Page_WalletTransactionDto_ {
        val localVariableQuery: MultiValueMap = mapOf("pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/user/transaction", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_WalletTransactionDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_WalletTransactionDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getBalance
     * 
     * @param acceptLanguage language (optional)
     * @return BalanceResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getBalance(acceptLanguage: kotlin.String? = null): BalanceResponse {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/balance", headers = localVariableHeaders
        )
        val response = request<BalanceResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as BalanceResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getRelatedRevenueList
     * 
     * @param relatedIds relatedIds 
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<RevenueDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getRelatedRevenueList(relatedIds: kotlin.String, acceptLanguage: kotlin.String? = null): kotlin.Array<RevenueDto> {
        val localVariableQuery: MultiValueMap = mapOf("relatedIds" to listOf("$relatedIds"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/related/revenue", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<kotlin.Array<RevenueDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<RevenueDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getRelatedSum
     * 
     * @param relatedIds relatedIds 
     * @param acceptLanguage language (optional)
     * @return SumResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getRelatedSum(relatedIds: kotlin.String, acceptLanguage: kotlin.String? = null): SumResponse {
        val localVariableQuery: MultiValueMap = mapOf("relatedIds" to listOf("$relatedIds"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/related/sum", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<SumResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SumResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getUserWalletTransaction
     * get transaction details
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return WalletTransactionDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserWalletTransaction(id: kotlin.String, acceptLanguage: kotlin.String? = null): WalletTransactionDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/user/transaction/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<WalletTransactionDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WalletTransactionDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getWalletBalance
     * 
     * @param acceptLanguage language (optional)
     * @return BalanceResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getWalletBalance(acceptLanguage: kotlin.String? = null): BalanceResponse {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/getbalance", headers = localVariableHeaders
        )
        val response = request<BalanceResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as BalanceResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getWalletTransaction
     * get transaction details
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return WalletTransactionDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getWalletTransaction(id: kotlin.String, acceptLanguage: kotlin.String? = null): WalletTransactionDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/wallet/subscriber/transaction/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<WalletTransactionDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WalletTransactionDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
