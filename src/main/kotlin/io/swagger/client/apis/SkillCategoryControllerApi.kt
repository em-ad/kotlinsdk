/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.SkillCategoryDto
import io.swagger.client.models.SkillCategoryModel
import io.swagger.client.models.SmartSkillCategoryDto

import io.swagger.client.infrastructure.*

class SkillCategoryControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * createSkillCategory
     * This api add to SkillCategory
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return SkillCategoryDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createCategory(body: SkillCategoryDto? = null, acceptLanguage: kotlin.String? = null): SkillCategoryDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/skill-category", headers = localVariableHeaders
        )
        val response = request<SkillCategoryDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SkillCategoryDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * deleteSkillCategory
     * This api delete to category and sub
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun deleteCategory2(id: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/datyar/skill-category/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get category skill 
     * This api get category skill
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return SkillCategoryModel
     */
    @Suppress("UNCHECKED_CAST")
    fun getCategoryById(id: kotlin.String, acceptLanguage: kotlin.String? = null): SkillCategoryModel {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/skill-category/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<SkillCategoryModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SkillCategoryModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get category skill 
     * This api get category skill
     * @param name name 
     * @param acceptLanguage language (optional)
     * @return SkillCategoryModel
     */
    @Suppress("UNCHECKED_CAST")
    fun getCategoryByName(name: kotlin.String, acceptLanguage: kotlin.String? = null): SkillCategoryModel {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/skill-category/with-name/{name}".replace("{" + "name" + "}", "$name"), headers = localVariableHeaders
        )
        val response = request<SkillCategoryModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SkillCategoryModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * list category skill 
     * This api list category skill
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<SkillCategoryModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getListCategory(acceptLanguage: kotlin.String? = null): kotlin.Array<SkillCategoryModel> {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/skill-category/list", headers = localVariableHeaders
        )
        val response = request<kotlin.Array<SkillCategoryModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SkillCategoryModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * list category skill 
     * This api list category skill
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return SkillCategoryModel
     */
    @Suppress("UNCHECKED_CAST")
    fun getSmartCategory(body: SmartSkillCategoryDto? = null, acceptLanguage: kotlin.String? = null): SkillCategoryModel {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/skill-category/smart-category", headers = localVariableHeaders
        )
        val response = request<SkillCategoryModel>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SkillCategoryModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * list category skill 
     * This api list category skill
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<SkillCategoryModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getSmartCategoryList(body: SmartSkillCategoryDto? = null, acceptLanguage: kotlin.String? = null): kotlin.Array<SkillCategoryModel> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/skill-category/smart-category/list", headers = localVariableHeaders
        )
        val response = request<kotlin.Array<SkillCategoryModel>>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SkillCategoryModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updateSkillCategory
     * This api update skillCategory
     * @param id id 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun updateCategory(id: kotlin.String, body: SkillCategoryDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/skill-category/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
