/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.BeforeLeaving
import io.swagger.client.models.DatyarUser
import io.swagger.client.models.Page_DatyarUser_

import io.swagger.client.infrastructure.*

class UserApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * beforeLeaving
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun beforeLeaving(body: BeforeLeaving? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/user/before-leaving", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * checkUserNameAvailability
     * 
     * @param username username 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun checkUserNameAvailability(username: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/user/check-username/{username}".replace("{" + "username" + "}", "$username"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get
     * 
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return DatyarUser
     */
    @Suppress("UNCHECKED_CAST")
    fun get5(id: kotlin.String, acceptLanguage: kotlin.String? = null): DatyarUser {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/user/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<DatyarUser>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DatyarUser
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllUsers
     * 
     * @param acceptLanguage language (optional)
     * @param deleted  (optional)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param from  (optional)
     * @param fullName  (optional)
     * @param lastName  (optional)
     * @param locked  (optional)
     * @param mobile  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param role  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @param tag  (optional)
     * @param to  (optional)
     * @param username  (optional)
     * @return Page_DatyarUser_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllUsers(acceptLanguage: kotlin.String? = null, deleted: kotlin.Boolean? = null, email: kotlin.String? = null, firstName: kotlin.String? = null, from: kotlin.Long? = null, fullName: kotlin.String? = null, lastName: kotlin.String? = null, locked: kotlin.Boolean? = null, mobile: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, role: kotlin.String? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, tag: kotlin.String? = null, to: kotlin.Long? = null, username: kotlin.String? = null): Page_DatyarUser_ {
        val localVariableQuery: MultiValueMap = mapOf("deleted" to listOf("$deleted"), "email" to listOf("$email"), "firstName" to listOf("$firstName"), "from" to listOf("$from"), "fullName" to listOf("$fullName"), "lastName" to listOf("$lastName"), "locked" to listOf("$locked"), "mobile" to listOf("$mobile"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "role" to listOf("$role"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"), "tag" to listOf("$tag"), "to" to listOf("$to"), "username" to listOf("$username"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/user", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_DatyarUser_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_DatyarUser_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
