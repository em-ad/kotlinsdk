/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ChangePasswordDto
import io.swagger.client.models.Page_UserDto_
import io.swagger.client.models.UserDto
import io.swagger.client.models.UserInputDto
import io.swagger.client.models.UserReportDto

import io.swagger.client.infrastructure.*

class UserControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * create
     * don&#x27;t fill id and userStatus
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createUser(body: UserInputDto? = null, acceptLanguage: kotlin.String? = null): UserDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/user", headers = localVariableHeaders
        )
        val response = request<UserDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * deleteUser
     * 
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun deleteUser(id: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/user/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllUser
     * 
     * @param acceptLanguage language (optional)
     * @param locked null value permitted (optional)
     * @param pageNumber starts from 0 (optional)
     * @param pageSize must be greater than 0 (optional)
     * @param role null value permitted (optional)
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending (optional)
     * @param sortKey sort will be based on these words (optional)
     * @return Page_UserDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllUser(acceptLanguage: kotlin.String? = null, locked: kotlin.Boolean? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, role: kotlin.String? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null): Page_UserDto_ {
        val localVariableQuery: MultiValueMap = mapOf("locked" to listOf("$locked"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "role" to listOf("$role"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/user", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_UserDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_UserDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllUsers
     * 
     * @param acceptLanguage language (optional)
     * @param deleted  (optional)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param from  (optional)
     * @param fullName  (optional)
     * @param lastName  (optional)
     * @param locked  (optional)
     * @param mobile  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param role  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @param tag  (optional)
     * @param to  (optional)
     * @param username  (optional)
     * @return Page_UserDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllUsers1(acceptLanguage: kotlin.String? = null, deleted: kotlin.Boolean? = null, email: kotlin.String? = null, firstName: kotlin.String? = null, from: kotlin.Long? = null, fullName: kotlin.String? = null, lastName: kotlin.String? = null, locked: kotlin.Boolean? = null, mobile: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, role: kotlin.String? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, tag: kotlin.String? = null, to: kotlin.Long? = null, username: kotlin.String? = null): Page_UserDto_ {
        val localVariableQuery: MultiValueMap = mapOf("deleted" to listOf("$deleted"), "email" to listOf("$email"), "firstName" to listOf("$firstName"), "from" to listOf("$from"), "fullName" to listOf("$fullName"), "lastName" to listOf("$lastName"), "locked" to listOf("$locked"), "mobile" to listOf("$mobile"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "role" to listOf("$role"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"), "tag" to listOf("$tag"), "to" to listOf("$to"), "username" to listOf("$username"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/user/all", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_UserDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_UserDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllUsers
     * 
     * @param acceptLanguage language (optional)
     * @param deleted  (optional)
     * @param deletedAtFrom  (optional)
     * @param deletedAtTo  (optional)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param from  (optional)
     * @param fullName  (optional)
     * @param lastName  (optional)
     * @param mobile  (optional)
     * @param pageNumber starts from 0 (optional)
     * @param pageSize must be greater than 0 (optional)
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending (optional)
     * @param sortKey sort will be based on these words (optional)
     * @param tag  (optional)
     * @param to  (optional)
     * @return Page_UserDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllUsers2(acceptLanguage: kotlin.String? = null, deleted: kotlin.Boolean? = null, deletedAtFrom: kotlin.String? = null, deletedAtTo: kotlin.String? = null, email: kotlin.String? = null, firstName: kotlin.String? = null, from: kotlin.Long? = null, fullName: kotlin.String? = null, lastName: kotlin.String? = null, mobile: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, tag: kotlin.String? = null, to: kotlin.Long? = null): Page_UserDto_ {
        val localVariableQuery: MultiValueMap = mapOf("deleted" to listOf("$deleted"), "deletedAtFrom" to listOf("$deletedAtFrom"), "deletedAtTo" to listOf("$deletedAtTo"), "email" to listOf("$email"), "firstName" to listOf("$firstName"), "from" to listOf("$from"), "fullName" to listOf("$fullName"), "lastName" to listOf("$lastName"), "mobile" to listOf("$mobile"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"), "tag" to listOf("$tag"), "to" to listOf("$to"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/user/admin-panel", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_UserDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_UserDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllUsersCsv
     * 
     * @param acceptLanguage language (optional)
     * @param deleted  (optional)
     * @param deletedAtFrom  (optional)
     * @param deletedAtTo  (optional)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param from  (optional)
     * @param fullName  (optional)
     * @param lastName  (optional)
     * @param mobile  (optional)
     * @param tag  (optional)
     * @param to  (optional)
     * @return void
     */
    fun getAllUsersCsv(acceptLanguage: kotlin.String? = null, deleted: kotlin.Boolean? = null, deletedAtFrom: kotlin.String? = null, deletedAtTo: kotlin.String? = null, email: kotlin.String? = null, firstName: kotlin.String? = null, from: kotlin.Long? = null, fullName: kotlin.String? = null, lastName: kotlin.String? = null, mobile: kotlin.String? = null, tag: kotlin.String? = null, to: kotlin.Long? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("deleted" to listOf("$deleted"), "deletedAtFrom" to listOf("$deletedAtFrom"), "deletedAtTo" to listOf("$deletedAtTo"), "email" to listOf("$email"), "firstName" to listOf("$firstName"), "from" to listOf("$from"), "fullName" to listOf("$fullName"), "lastName" to listOf("$lastName"), "mobile" to listOf("$mobile"), "tag" to listOf("$tag"), "to" to listOf("$to"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/user/admin-panel/users.csv", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getProfile
     * 
     * @param acceptLanguage language (optional)
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getProfile(acceptLanguage: kotlin.String? = null): UserDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/user/profile", headers = localVariableHeaders
        )
        val response = request<UserDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getReport
     * 
     * @param acceptLanguage language (optional)
     * @param todayCount make it true if you want it (optional)
     * @param totalCount make it true if you want it (optional)
     * @return UserReportDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getReport1(acceptLanguage: kotlin.String? = null, todayCount: kotlin.Boolean? = null, totalCount: kotlin.Boolean? = null): UserReportDto {
        val localVariableQuery: MultiValueMap = mapOf("todayCount" to listOf("$todayCount"), "totalCount" to listOf("$totalCount"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/user/report", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<UserReportDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserReportDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getUser
     * 
     * @param id id 
     * @param acceptLanguage language (optional)
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getUser(id: kotlin.String, acceptLanguage: kotlin.String? = null): UserDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/user/{id}".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<UserDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * lock
     * used for locking user
     * @param acceptLanguage language (optional)
     * @param userId userId used by admin (optional)
     * @return void
     */
    fun lockUsingPATCH1(acceptLanguage: kotlin.String? = null, userId: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("userId" to listOf("$userId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/user/lock", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * selectiveUpdate
     * fill selectively, don&#x27;t fill userStatus
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun selectiveUpdateUserUsingPATCH1(body: UserInputDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/user", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * lock
     * used for locking user
     * @param acceptLanguage language (optional)
     * @param userId userId used by admin (optional)
     * @return void
     */
    fun unlockUsingPATCH1(acceptLanguage: kotlin.String? = null, userId: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("userId" to listOf("$userId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/user/unlock", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updatePassword
     * don&#x27;t fill id
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun updatePasswordUsingPATCH1(body: ChangePasswordDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/user/password", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updateProfile
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun updateProfileUsingPATCH1(body: UserInputDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/user/profile", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * update
     * don&#x27;t fill userStatus
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun updateUser(body: UserInputDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/user", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * update
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun updateUser1(body: UserInputDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/user/admin-panel", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
