/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CancelSessionDto
import io.swagger.client.models.CreateMessageDto
import io.swagger.client.models.CreateSessionDto
import io.swagger.client.models.ExtendConsultationDto
import io.swagger.client.models.FinalFromToTimeModel
import io.swagger.client.models.LawyerCancellationsDto
import io.swagger.client.models.ListSessionDto
import io.swagger.client.models.OutputSessionDTO
import io.swagger.client.models.Page_AdminSessionModel_
import io.swagger.client.models.Page_ListSessionDto_
import io.swagger.client.models.Page_OrganizationalCalendarDto_
import io.swagger.client.models.Session
import io.swagger.client.models.SetSessionStartTimeDto

import io.swagger.client.infrastructure.*

class SessionApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * cancelClient
     * 
     * @param sessionId session-id 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun cancelClientUsingPATCH1(sessionId: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/sessions/cancel/{session-id}".replace("{" + "session-id" + "}", "$sessionId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * cancelLawyer
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return Session
     */
    @Suppress("UNCHECKED_CAST")
    fun cancelLawyerUsingPATCH1(body: LawyerCancellationsDto? = null, acceptLanguage: kotlin.String? = null): Session {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/sessions/cancel", headers = localVariableHeaders
        )
        val response = request<Session>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Session
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * createMessage
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return OutputSessionDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createMessage(body: CreateMessageDto? = null, acceptLanguage: kotlin.String? = null): OutputSessionDTO {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/sessions/create-message", headers = localVariableHeaders
        )
        val response = request<OutputSessionDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OutputSessionDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * createSession
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return Session
     */
    @Suppress("UNCHECKED_CAST")
    fun createSession(body: CreateSessionDto? = null, acceptLanguage: kotlin.String? = null): Session {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/sessions", headers = localVariableHeaders
        )
        val response = request<Session>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Session
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * deleteMessage
     * 
     * @param sessionId session-Id 
     * @param messageId message-Id 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun deleteMessage(sessionId: kotlin.String, messageId: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/datyar/sessions/delete-message/{session-Id}/{message-Id}".replace("{" + "session-Id" + "}", "$sessionId").replace("{" + "message-Id" + "}", "$messageId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * endSession
     * 
     * @param sessionId session-id 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun endSessionUsingPATCH1(sessionId: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/sessions/end-session/{session-id}".replace("{" + "session-id" + "}", "$sessionId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllLawyerOrders
     * 
     * @param acceptLanguage language (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @param state  (optional)
     * @return Page_ListSessionDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllLawyerOrders(acceptLanguage: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, state: kotlin.String? = null): Page_ListSessionDto_ {
        val localVariableQuery: MultiValueMap = mapOf("pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"), "state" to listOf("$state"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/sessions/getAllLawyerOrders", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_ListSessionDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_ListSessionDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllOrders
     * 
     * @param acceptLanguage language (optional)
     * @param cancellationOwner  (optional)
     * @param clientFirstName  (optional)
     * @param clientLastName  (optional)
     * @param clientMobile  (optional)
     * @param consultingType  (optional)
     * @param from  (optional)
     * @param isCancelRequested  (optional)
     * @param isExtendRequested  (optional)
     * @param lawyerFirstName  (optional)
     * @param lawyerLastName  (optional)
     * @param lawyerMobile  (optional)
     * @param orderNumber  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @param state  (optional)
     * @param to  (optional)
     * @param userId  (optional)
     * @param userType  (optional)
     * @return Page_AdminSessionModel_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllOrders(acceptLanguage: kotlin.String? = null, cancellationOwner: kotlin.String? = null, clientFirstName: kotlin.String? = null, clientLastName: kotlin.String? = null, clientMobile: kotlin.String? = null, consultingType: kotlin.String? = null, from: kotlin.String? = null, isCancelRequested: kotlin.Boolean? = null, isExtendRequested: kotlin.Boolean? = null, lawyerFirstName: kotlin.String? = null, lawyerLastName: kotlin.String? = null, lawyerMobile: kotlin.String? = null, orderNumber: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, state: kotlin.String? = null, to: kotlin.String? = null, userId: kotlin.String? = null, userType: kotlin.String? = null): Page_AdminSessionModel_ {
        val localVariableQuery: MultiValueMap = mapOf("cancellationOwner" to listOf("$cancellationOwner"), "clientFirstName" to listOf("$clientFirstName"), "clientLastName" to listOf("$clientLastName"), "clientMobile" to listOf("$clientMobile"), "consultingType" to listOf("$consultingType"), "from" to listOf("$from"), "isCancelRequested" to listOf("$isCancelRequested"), "isExtendRequested" to listOf("$isExtendRequested"), "lawyerFirstName" to listOf("$lawyerFirstName"), "lawyerLastName" to listOf("$lawyerLastName"), "lawyerMobile" to listOf("$lawyerMobile"), "orderNumber" to listOf("$orderNumber"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"), "state" to listOf("$state"), "to" to listOf("$to"), "userId" to listOf("$userId"), "userType" to listOf("$userType"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/sessions/getAllOrders", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_AdminSessionModel_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_AdminSessionModel_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllUserOrders
     * 
     * @param acceptLanguage language (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @param state  (optional)
     * @return Page_ListSessionDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllUserOrders(acceptLanguage: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, state: kotlin.String? = null): Page_ListSessionDto_ {
        val localVariableQuery: MultiValueMap = mapOf("pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"), "state" to listOf("$state"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/sessions/getAllUserOrders", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_ListSessionDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_ListSessionDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getCalender
     * 
     * @param lawyerId lawyer-Id 
     * @param acceptLanguage language (optional)
     * @return kotlin.collections.Map<kotlin.String, FinalFromToTimeModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalender(lawyerId: kotlin.String, acceptLanguage: kotlin.String? = null): kotlin.collections.Map<kotlin.String, FinalFromToTimeModel> {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/sessions/getCalender/{lawyer-Id}".replace("{" + "lawyer-Id" + "}", "$lawyerId"), headers = localVariableHeaders
        )
        val response = request<kotlin.collections.Map<kotlin.String, FinalFromToTimeModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, FinalFromToTimeModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getLawyerOrganizationalCalendar
     * 
     * @param acceptLanguage language (optional)
     * @param from  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @param to  (optional)
     * @return Page_OrganizationalCalendarDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getLawyerOrganizationalCalendar(acceptLanguage: kotlin.String? = null, from: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null, to: kotlin.String? = null): Page_OrganizationalCalendarDto_ {
        val localVariableQuery: MultiValueMap = mapOf("from" to listOf("$from"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"), "to" to listOf("$to"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/sessions/get-lawyer-organizational-calendar", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_OrganizationalCalendarDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_OrganizationalCalendarDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getOutputDto
     * 
     * @param sessionId session-id 
     * @param acceptLanguage language (optional)
     * @return OutputSessionDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getOutputDto(sessionId: kotlin.String, acceptLanguage: kotlin.String? = null): OutputSessionDTO {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/sessions/{session-id}".replace("{" + "session-id" + "}", "$sessionId"), headers = localVariableHeaders
        )
        val response = request<OutputSessionDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OutputSessionDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getUrgentRequests
     * 
     * @param acceptLanguage language (optional)
     * @return ListSessionDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getUrgentRequests(acceptLanguage: kotlin.String? = null): ListSessionDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/sessions/get-urgent-requests", headers = localVariableHeaders
        )
        val response = request<ListSessionDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ListSessionDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * requestCancel
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun requestCancelUsingPATCH1(body: CancelSessionDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/sessions/request-cancel", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * requestExtend
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun requestExtendUsingPATCH1(body: ExtendConsultationDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/sessions/request-extend", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * sendMessage
     * 
     * @param sessionId session-id 
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun sendMessage(sessionId: kotlin.String, acceptLanguage: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/sessions/send-message/{session-id}".replace("{" + "session-id" + "}", "$sessionId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * setSessionStartTime
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return Session
     */
    @Suppress("UNCHECKED_CAST")
    fun setSessionStartTimeUsingPATCH1(body: SetSessionStartTimeDto? = null, acceptLanguage: kotlin.String? = null): Session {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/sessions/set-start-time", headers = localVariableHeaders
        )
        val response = request<Session>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Session
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
