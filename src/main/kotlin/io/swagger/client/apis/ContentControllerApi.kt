/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ContentRateDto
import io.swagger.client.models.CreateContentDto
import io.swagger.client.models.GetContentDto
import io.swagger.client.models.GetContentLocationDto
import io.swagger.client.models.Page_GetContentDto_

import io.swagger.client.infrastructure.*

class ContentControllerApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * addContent
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return GetContentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun addContent(body: CreateContentDto? = null, acceptLanguage: kotlin.String? = null): GetContentDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contents", headers = localVariableHeaders
        )
        val response = request<GetContentDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetContentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * addUserRate
     * 
     * @param contentId contentId 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return void
     */
    fun addUserRate(contentId: kotlin.String, body: ContentRateDto? = null, acceptLanguage: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contents/{contentId}/user-rate".replace("{" + "contentId" + "}", "$contentId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * deleteContent
     * 
     * @param contentId contentId 
     * @param acceptLanguage language (optional)
     * @param deleteByChildren  (optional)
     * @return void
     */
    fun deleteContent(contentId: kotlin.String, acceptLanguage: kotlin.String? = null, deleteByChildren: kotlin.Boolean? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("deleteByChildren" to listOf("$deleteByChildren"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/contents/{contentId}".replace("{" + "contentId" + "}", "$contentId"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * editContent
     * 
     * @param contentId contentId 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return GetContentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun editContent(contentId: kotlin.String, body: CreateContentDto? = null, acceptLanguage: kotlin.String? = null): GetContentDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/contents/{contentId}".replace("{" + "contentId" + "}", "$contentId"), headers = localVariableHeaders
        )
        val response = request<GetContentDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetContentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getContent
     * 
     * @param contentId contentId 
     * @param acceptLanguage language (optional)
     * @param byChildren  (optional)
     * @return GetContentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getContent(contentId: kotlin.String, acceptLanguage: kotlin.String? = null, byChildren: kotlin.Boolean? = null): GetContentDto {
        val localVariableQuery: MultiValueMap = mapOf("byChildren" to listOf("$byChildren"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contents/{contentId}".replace("{" + "contentId" + "}", "$contentId"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<GetContentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetContentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getContentList
     * 
     * @param pageNumber starts from 0 
     * @param pageSize must be greater than 0 
     * @param sort ASC&#x3D;ascending ,DESC&#x3D;descending 
     * @param acceptLanguage language (optional)
     * @param categoryId  (optional)
     * @param childEmbed  (optional)
     * @param content  (optional)
     * @param contentType  (optional)
     * @param featured  (optional)
     * @param hasGeo  (optional)
     * @param highlight  (optional)
     * @param keyword  (optional)
     * @param maxRate maxRate must be between 1 - 5 (optional)
     * @param maxStudyDuration  (optional)
     * @param minRate minRate must be between 1 - 5 (optional)
     * @param minStudyDuration  (optional)
     * @param sortKey sort will be based on these words (optional)
     * @param status  (optional)
     * @param summary  (optional)
     * @param title  (optional)
     * @param type  (optional)
     * @return Page_GetContentDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getContentList(pageNumber: kotlin.Int, pageSize: kotlin.Int, sort: kotlin.String, acceptLanguage: kotlin.String? = null, categoryId: kotlin.String? = null, childEmbed: kotlin.Boolean? = null, content: kotlin.String? = null, contentType: kotlin.String? = null, featured: kotlin.Boolean? = null, hasGeo: kotlin.Boolean? = null, highlight: kotlin.Boolean? = null, keyword: kotlin.String? = null, maxRate: kotlin.Int? = null, maxStudyDuration: kotlin.Int? = null, minRate: kotlin.Int? = null, minStudyDuration: kotlin.Int? = null, sortKey: kotlin.Array<kotlin.String>? = null, status: kotlin.String? = null, summary: kotlin.String? = null, title: kotlin.String? = null, type: kotlin.String? = null): Page_GetContentDto_ {
        val localVariableQuery: MultiValueMap = mapOf("categoryId" to listOf("$categoryId"), "childEmbed" to listOf("$childEmbed"), "content" to listOf("$content"), "contentType" to listOf("$contentType"), "featured" to listOf("$featured"), "hasGeo" to listOf("$hasGeo"), "highlight" to listOf("$highlight"), "keyword" to listOf("$keyword"), "maxRate" to listOf("$maxRate"), "maxStudyDuration" to listOf("$maxStudyDuration"), "minRate" to listOf("$minRate"), "minStudyDuration" to listOf("$minStudyDuration"), "pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "multi"), "status" to listOf("$status"), "summary" to listOf("$summary"), "title" to listOf("$title"), "type" to listOf("$type"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contents", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_GetContentDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_GetContentDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getContentLocationsList
     * 
     * @param acceptLanguage language (optional)
     * @param byChildren  (optional)
     * @param content  (optional)
     * @param distance  (optional)
     * @param keyword  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param summary  (optional)
     * @param tagTitle  (optional)
     * @param title  (optional)
     * @param type  (optional)
     * @return kotlin.Array<GetContentLocationDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getContentLocationsList(acceptLanguage: kotlin.String? = null, byChildren: kotlin.Boolean? = null, content: kotlin.String? = null, distance: kotlin.Double? = null, keyword: kotlin.String? = null, lat: kotlin.Double? = null, lng: kotlin.Double? = null, summary: kotlin.String? = null, tagTitle: kotlin.String? = null, title: kotlin.String? = null, type: kotlin.String? = null): kotlin.Array<GetContentLocationDto> {
        val localVariableQuery: MultiValueMap = mapOf("byChildren" to listOf("$byChildren"), "content" to listOf("$content"), "distance" to listOf("$distance"), "keyword" to listOf("$keyword"), "lat" to listOf("$lat"), "lng" to listOf("$lng"), "summary" to listOf("$summary"), "tagTitle" to listOf("$tagTitle"), "title" to listOf("$title"), "type" to listOf("$type"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contents/locations", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<kotlin.Array<GetContentLocationDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GetContentLocationDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
