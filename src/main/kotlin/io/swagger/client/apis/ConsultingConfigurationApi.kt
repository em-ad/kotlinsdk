/**
 * Datyar REST APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ConfigurationInputDto
import io.swagger.client.models.ConfigurationOutputDto
import io.swagger.client.models.ConsultationPackage
import io.swagger.client.models.ConsultationSetting
import io.swagger.client.models.Page_ConfigurationOutputDto_
import io.swagger.client.models.ServicesOutputDto
import io.swagger.client.models.SettingInputDto
import io.swagger.client.models.SettingOutputDto

import io.swagger.client.infrastructure.*

class ConsultingConfigurationApi(basePath: kotlin.String = "https://datyar.vaslapp.com:443") : ApiClient(basePath) {

    /**
     * changeConfig
     * 
     * @param userId user-id 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ConfigurationOutputDto
     */
    @Suppress("UNCHECKED_CAST")
    fun changeConfigUsingPATCH1(userId: kotlin.String, body: ConfigurationInputDto? = null, acceptLanguage: kotlin.String? = null): ConfigurationOutputDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/consulting/configurations/{user-id}".replace("{" + "user-id" + "}", "$userId"), headers = localVariableHeaders
        )
        val response = request<ConfigurationOutputDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ConfigurationOutputDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * changeConfig
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ConfigurationOutputDto
     */
    @Suppress("UNCHECKED_CAST")
    fun changeConfigUsingPATCH2(body: ConfigurationInputDto? = null, acceptLanguage: kotlin.String? = null): ConfigurationOutputDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/api/v1/datyar/consulting/lawyer/configurations", headers = localVariableHeaders
        )
        val response = request<ConfigurationOutputDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ConfigurationOutputDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * createSetting
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return SettingOutputDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createSetting(body: SettingInputDto? = null, acceptLanguage: kotlin.String? = null): SettingOutputDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/datyar/consulting/settings", headers = localVariableHeaders
        )
        val response = request<SettingOutputDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SettingOutputDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getAllConfigs
     * 
     * @param acceptLanguage language (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param sortKey  (optional)
     * @return Page_ConfigurationOutputDto_
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllConfigs(acceptLanguage: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, sort: kotlin.String? = null, sortKey: kotlin.Array<kotlin.String>? = null): Page_ConfigurationOutputDto_ {
        val localVariableQuery: MultiValueMap = mapOf("pageNumber" to listOf("$pageNumber"), "pageSize" to listOf("$pageSize"), "sort" to listOf("$sort"), "sortKey" to toMultiValue(sortKey!!.toList(), "pipe"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/consulting/configurations", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<Page_ConfigurationOutputDto_>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Page_ConfigurationOutputDto_
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getConfig
     * 
     * @param consultingType consulting-type 
     * @param acceptLanguage language (optional)
     * @return ConfigurationOutputDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getConfig(consultingType: kotlin.String, acceptLanguage: kotlin.String? = null): ConfigurationOutputDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/consulting/configurations/{consulting-type}".replace("{" + "consulting-type" + "}", "$consultingType"), headers = localVariableHeaders
        )
        val response = request<ConfigurationOutputDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ConfigurationOutputDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getConfig
     * 
     * @param userId user-id 
     * @param consultingType consulting-type 
     * @param acceptLanguage language (optional)
     * @return ConfigurationOutputDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getConfig1(userId: kotlin.String, consultingType: kotlin.String, acceptLanguage: kotlin.String? = null): ConfigurationOutputDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/consulting/configurations/{user-id}/{consulting-type}".replace("{" + "user-id" + "}", "$userId").replace("{" + "consulting-type" + "}", "$consultingType"), headers = localVariableHeaders
        )
        val response = request<ConfigurationOutputDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ConfigurationOutputDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getServices
     * 
     * @param userId user-id 
     * @param acceptLanguage language (optional)
     * @return ServicesOutputDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getServices(userId: kotlin.String, acceptLanguage: kotlin.String? = null): ServicesOutputDto {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/consulting/services/{user-id}".replace("{" + "user-id" + "}", "$userId"), headers = localVariableHeaders
        )
        val response = request<ServicesOutputDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ServicesOutputDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getSetting
     * 
     * @param consultationType consultation-type 
     * @param acceptLanguage language (optional)
     * @return ConsultationSetting
     */
    @Suppress("UNCHECKED_CAST")
    fun getSetting(consultationType: kotlin.String, acceptLanguage: kotlin.String? = null): ConsultationSetting {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/consulting/settings/{consultation-type}".replace("{" + "consultation-type" + "}", "$consultationType"), headers = localVariableHeaders
        )
        val response = request<ConsultationSetting>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ConsultationSetting
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getSettingPackages
     * 
     * @param consultationType consultation-type 
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<ConsultationPackage>
     */
    @Suppress("UNCHECKED_CAST")
    fun getSettingPackages(consultationType: kotlin.String, acceptLanguage: kotlin.String? = null): kotlin.Array<ConsultationPackage> {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/datyar/consulting/settings/packages/{consultation-type}".replace("{" + "consultation-type" + "}", "$consultationType"), headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ConsultationPackage>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ConsultationPackage>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updatePackage
     * 
     * @param consultationType consultation-type 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return kotlin.Array<ConsultationPackage>
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePackage(consultationType: kotlin.String, body: ConsultationPackage? = null, acceptLanguage: kotlin.String? = null): kotlin.Array<ConsultationPackage> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/consulting/settings/packages/{consultation-type}".replace("{" + "consultation-type" + "}", "$consultationType"), headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ConsultationPackage>>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ConsultationPackage>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updateSetting
     * 
     * @param body  (optional)
     * @param acceptLanguage language (optional)
     * @return ConsultationSetting
     */
    @Suppress("UNCHECKED_CAST")
    fun updateSetting(body: SettingInputDto? = null, acceptLanguage: kotlin.String? = null): ConsultationSetting {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/datyar/consulting/settings", headers = localVariableHeaders
        )
        val response = request<ConsultationSetting>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ConsultationSetting
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
